<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   	http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.linkpal" />

	<!--
	这里实际上扫描了cn.linkpal 这个包下面的所有bean，会与spring-mvc中扫描的内容发生重复
	更合理的方法是将spring.xml文件进行拆分
	spring-dao   只扫描dao相关的bean
	spring-service   只扫描service相关的bean
	spring-trans   设置事务相关的信息
	最后在xml中采用spring-*的形式包括进来
	 -->

	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>java:comp/env/jdbc/bsjxviewstock</value>
		</property>
	</bean>

	<!-- 引用Mapper文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis.xml"></property>

		<!-- 扫描mybatis表对应的文件 -->
		<property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" />
	</bean>

	<!-- 配置接口与mapper.xml的对应关系 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName"  value="sqlSessionFactory"/>
		<!--
		如果使用
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		会发生错误，因为db.propertites加载在sqlSessionFactory之后，所以使用sqlSessionFactoryBeanName代替
		 -->
		<!-- 配置mapper对应的接口，指定所在的包 -->
		<property name="basePackage" value="com.linkpal.map" />
	</bean>

	<!-- 文件上传的配置 -->
	<!--<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		&lt;!&ndash; 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 &ndash;&gt;
		<property name="maxUploadSize" value="2000000"/>
	</bean>-->

<!--	<bean id="multipartResolver" class="com.linkpal.listener.CustomMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="838860800"></property>
	</bean>-->

	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到WebContent目录下的error.jsp页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error</prop>
			</props>
		</property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 动态代理实现 不用写dao的实现类-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.linkpal.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="append*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="repair" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="delAndRepair" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>
			<tx:method name="check*" propagation="REQUIRED" rollback-for="com.linkpal.Excepetion.RollbackException"/>

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.linkpal..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
					 advice-ref="transactionAdvice" />
	</aop:config>


	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.linkpal.shiro.UserRealm"/>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"/>
	</bean>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"/>
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="/login.jsp"/>
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				/user/login.do=anon
				/admin/*=roles["超级管理员"]
				/student/*=roles["学生"]
				/book/add=perms["book:create"]
			</value>
		</property>
	</bean>

	<!-- rememberMeManager管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间30天 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:shared="true">
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>

</beans>
